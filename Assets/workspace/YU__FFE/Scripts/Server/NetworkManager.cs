using System;
using System.Collections;
using UnityEngine;
using UnityEngine.Networking;
using UnityEngine.SceneManagement;
using workspace.YU__FFE.Scripts.Common;

namespace workspace.YU__FFE.Scripts.Server {
    public class NetworkManager : Singleton<NetworkManager>
    {
        
        // üìå ÌöåÏõêÍ∞ÄÏûÖ Ï≤òÎ¶¨
        
        public struct SignupData
        {
            public string username;
            public string nickname;
            public string password;
        }
        public IEnumerator Signup(SignupData signupData, Action success, Action failure)
        {
            string jsonString = JsonUtility.ToJson(signupData);
            byte[] bodyRaw = System.Text.Encoding.UTF8.GetBytes(jsonString);

            using (UnityWebRequest www = new UnityWebRequest(Constants.ServerURL + "/auth/signup", UnityWebRequest.kHttpVerbPOST))
            {
                www.uploadHandler = new UploadHandlerRaw(bodyRaw);
                www.downloadHandler = new DownloadHandlerBuffer();
                www.SetRequestHeader("Content-Type", "application/json");

                yield return www.SendWebRequest();

                if (www.result == UnityWebRequest.Result.ConnectionError || www.result == UnityWebRequest.Result.ProtocolError)
                {
                    Debug.Log("Error: " + www.error);

                    if (www.responseCode == 409)
                    {
                        // // Ï§ëÎ≥µ ÏÇ¨Ïö©Ïûê Ï≤òÎ¶¨
                        // GameManager.Instance.OpenConfirmPanel("Ïù¥ÎØ∏ Ï°¥Ïû¨ÌïòÎäî ÏÇ¨Ïö©ÏûêÏûÖÎãàÎã§.", () =>
                        // {
                        //     failure?.Invoke();
                        // });
                    }
                    else
                    {
                        failure?.Invoke();
                    }
                }
                else
                {
                    var result = www.downloadHandler.text;
                    Debug.Log("ÌöåÏõêÍ∞ÄÏûÖ ÏÑ±Í≥µ: " + result);

                    // ÌöåÏõêÍ∞ÄÏûÖ ÏÑ±Í≥µ ÌåùÏóÖ
                    // GameManager.Instance.OpenConfirmPanel("ÌöåÏõê Í∞ÄÏûÖÏù¥ ÏôÑÎ£åÎêòÏóàÏäµÎãàÎã§.", () =>
                    // {
                    //     success?.Invoke();
                    // });
                }
            }
        }

        // üìå Î°úÍ∑∏Ïù∏ Ï≤òÎ¶¨
        public struct SigninData
        {
            public string username;
            public string password;
        }
        public struct SigninResult
        {
            public int result;
        }
        public IEnumerator Signin(SigninData signinData, Action success, Action<int> failure)
        {
            string jsonString = JsonUtility.ToJson(signinData);
            byte[] bodyRaw = System.Text.Encoding.UTF8.GetBytes(jsonString);

            using (UnityWebRequest www = new UnityWebRequest(Constants.ServerURL + "/users/signin", UnityWebRequest.kHttpVerbPOST))
            {
                www.uploadHandler = new UploadHandlerRaw(bodyRaw);
                www.downloadHandler = new DownloadHandlerBuffer();
                www.SetRequestHeader("Content-Type", "application/json");

                yield return www.SendWebRequest();

                if (www.result == UnityWebRequest.Result.ConnectionError || www.result == UnityWebRequest.Result.ProtocolError) {
                    failure?.Invoke(-1); // ÏÑúÎ≤Ñ Ïò§Î•ò
                    yield break;
                }

                var cookie = www.GetResponseHeader("set-cookie");
                if (!string.IsNullOrEmpty(cookie))
                {
                    int lastIndex = cookie.LastIndexOf(";");
                    string sid = cookie.Substring(0, lastIndex);
                    PlayerPrefs.SetString("sid", sid); // Î°úÍ∑∏Ïù∏ ÏÑ∏ÏÖò Ï†ÄÏû•
                }

                var resultString = www.downloadHandler.text;
                var result = JsonUtility.FromJson<SigninResult>(resultString);

                if (result.result == 0)
                {
                    // Ïú†Ï†ÄÎÑ§ÏûÑ Ïú†Ìö®ÌïòÏßÄ ÏïäÏùå
                    // GameManager.Instance.OpenConfirmPanel("Ïú†Ï†ÄÎÑ§ÏûÑÏù¥ Ïú†Ìö®ÌïòÏßÄ ÏïäÏäµÎãàÎã§.", () =>
                    // {
                    //     failure?.Invoke(0);
                    // });
                }
                else if (result.result == 1)
                {
                    // Ìå®Ïä§ÏõåÎìú Ïú†Ìö®ÌïòÏßÄ ÏïäÏùå
                    // GameManager.Instance.OpenConfirmPanel("Ìå®Ïä§ÏõåÎìúÍ∞Ä Ïú†Ìö®ÌïòÏßÄ ÏïäÏäµÎãàÎã§.", () =>
                    // {
                    //     failure?.Invoke(1);
                    // });
                }
                else if (result.result == 2)
                {
                    // Î°úÍ∑∏Ïù∏ ÏÑ±Í≥µ
                    // GameManager.Instance.OpenConfirmPanel("Î°úÍ∑∏Ïù∏Ïóê ÏÑ±Í≥µÌïòÏòÄÏäµÎãàÎã§.", () =>
                    // {
                    //     success?.Invoke();
                    // });
                }
            }
        }
        //
        // // üìå Ï†êÏàò Ï°∞Ìöå
        // public IEnumerator GetScore(Action<ScoreResult> success, Action failure)
        // {
        //     using (UnityWebRequest www = new UnityWebRequest(Constants.ServerURL + "/users/score", UnityWebRequest.kHttpVerbGET))
        //     {
        //         www.downloadHandler = new DownloadHandlerBuffer();
        //
        //         string sid = PlayerPrefs.GetString("sid", "");
        //         if (!string.IsNullOrEmpty(sid))
        //         {
        //             www.SetRequestHeader("Cookie", sid);
        //         }
        //
        //         yield return www.SendWebRequest();
        //
        //         if (www.result == UnityWebRequest.Result.ConnectionError || www.result == UnityWebRequest.Result.ProtocolError)
        //         {
        //             if (www.responseCode == 403)
        //             {
        //                 Debug.Log("Î°úÍ∑∏Ïù∏Ïù¥ ÌïÑÏöîÌï©ÎãàÎã§.");
        //             }
        //
        //             failure?.Invoke();
        //         }
        //         else
        //         {
        //             var result = www.downloadHandler.text;
        //             var userScore = JsonUtility.FromJson<ScoreResult>(result);
        //             success?.Invoke(userScore);
        //         }
        //     }
        // }

        // // üìå Î¶¨ÎçîÎ≥¥Îìú Ï°∞Ìöå
        // public IEnumerator GetLeaderboard(Action<Scores> success, Action failure)
        // {
        //     using (UnityWebRequest www = new UnityWebRequest(Constants.ServerURL + "/leaderboard", UnityWebRequest.kHttpVerbGET))
        //     {
        //         www.downloadHandler = new DownloadHandlerBuffer();
        //
        //         string sid = PlayerPrefs.GetString("sid", "");
        //         if (!string.IsNullOrEmpty(sid))
        //         {
        //             www.SetRequestHeader("Cookie", sid);
        //         }
        //
        //         yield return www.SendWebRequest();
        //
        //         if (www.result == UnityWebRequest.Result.ConnectionError || www.result == UnityWebRequest.Result.ProtocolError)
        //         {
        //             if (www.responseCode == 403)
        //             {
        //                 Debug.Log("Î°úÍ∑∏Ïù∏Ïù¥ ÌïÑÏöîÌï©ÎãàÎã§.");
        //             }
        //
        //             failure?.Invoke();
        //         }
        //         else
        //         {
        //             var result = www.downloadHandler.text;
        //             var scores = JsonUtility.FromJson<Scores>(result);
        //             success?.Invoke(scores);
        //         }
        //     }
        // }
    }
}
